library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(diet)
str(Diet)
str(BodyWeight)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
str(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
#Work in default working directory
#Download file, unzip it if it does not exist
URL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
destFile <- "power_consumption.zip"
if (!file.exists(destFile)){
download.file(URL, destfile = destFile, mode='wb')
unzip(destFile)
}
#Try to read subset of data using SQL methods(just for practice)
library(RSQLite)
# Create/Connect to a database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
# read txt file into temp sql database
dbWriteTable(con, name="household_power_consumption", value="household_power_consumption.txt",
row.names=F, header=T, sep = ";")
# Query your data as you like
PowerDataFeb <- dbGetQuery(con, "SELECT * FROM household_power_consumption WHERE (Date = '1/2/2007' or Date = '2/2/2007')")
#Close connection
dbDisconnect(con)
#Convert the Date and Time variables to Date/Time classes
PowerDataFeb$Date <- as.Date(PowerDataFeb$Date, format = "%d/%m/%Y")
PowerDataFeb$timetemp <- paste(PowerDataFeb$Date, PowerDataFeb$Time)
PowerDataFeb$Time <- strptime(PowerDataFeb$timetemp, format = "%Y-%m-%d %H:%M:%S")
#Open graphic device PNG and Draw figure Histogram
png(filename = "plot1.png", width = 480, height = 480, units = "px")
hist(PowerDataFeb$Global_active_power, col = "red", main = "Global Active Power", xlab = "Globa Active Power (kilowatts)")
dev.off()
#Work in default working directory
#Download file, unzip it if it does not exist
URL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
destFile <- "power_consumption.zip"
if (!file.exists(destFile)){
download.file(URL, destfile = destFile, mode='wb')
unzip(destFile)
}
#Try to read subset of data using SQL methods(just for practice)
library(RSQLite)
# Create/Connect to a database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
# read txt file into temp sql database
dbWriteTable(con, name="household_power_consumption", value="household_power_consumption.txt",
row.names=F, header=T, sep = ";")
# Query your data as you like
PowerDataFeb <- dbGetQuery(con, "SELECT * FROM household_power_consumption WHERE (Date = '1/2/2007' or Date = '2/2/2007')")
#Close connection
dbDisconnect(con)
#Convert the Date and Time variables to Date/Time classes
PowerDataFeb$Date <- as.Date(PowerDataFeb$Date, format = "%d/%m/%Y")
PowerDataFeb$timetemp <- paste(PowerDataFeb$Date, PowerDataFeb$Time)
PowerDataFeb$Time <- strptime(PowerDataFeb$timetemp, format = "%Y-%m-%d %H:%M:%S")
#Open graphic device PNG and Draw figure Histogram
png(filename = "plot1.png", width = 480, height = 480, units = "px")
hist(PowerDataFeb$Global_active_power, col = "red", main = "Global Active Power", xlab = "Globa Active Power (kilowatts)")
dev.off()
getwd()
setwd("C:/Users/soloveynv/Documents/R Scripts/Coursera/RepResearch2")
library(data.table)
library(R.utils)
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destFile <- "StormData.csv.bz2"
DataFile <- "StormData.csv"
if (!file.exists(destFile)){
download.file(URL, destfile = destFile, mode='wb')
}
bunzip2(destFile, DataFile)
StormData <- fread(DataFile, nrows = 902297)
View(StormData)
str(StormData)
StormData$BGN_DATE <- as.Data(StormData$BGN_DATE)
StormData$BGN_DATE <- as.Date(StormData$BGN_DATE)
StormData$BGN_DATE <- strptime(StormData$BGN_DATE, "%m/%d/%y %H:%M:%S")
str(StormData)
StormData <- fread(DataFile)
StormData$BGN_DATE <- as.Date(StormData$BGN_DATE, "%m/%d/%y %H:%M:%S")
str(StormData)
StormData <- fread(DataFile)
str(StormData)
StormData$BGN_DATE <- as.Date(StormData$BGN_DATE, "%m/%d/%Y %H:%M:%S")
str(StormData)
StormData <- fread(DataFile)
StormData$BGN_DATE <- as.Date(StormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S")
library(data.table)
library(R.utils)
library(ggplot2)
library(plyr)
library(dplyr)
hist(StormData$EVTYPE)
StormDataAGG <- aggregate(FATALITIES ~ INJURIES + EVTYPE, data = StormData, sum)
View(StormDataAGG)
StormDataAGG <- aggregate(FATALITIES ~ INJURIES, list(StormData$EVTYPE), sum)
StormDataAGG <- aggregate(StormData$FATALITIES ~ StormData$INJURIES, list(StormData$EVTYPE), sum)
StormDataAGG <- aggregate(FATALITIES ~ INJURIES, by = list(EVTYPE), data = StormData, sum)
StormDataAGG <- aggregate(StormData$FATALITIES ~ StormData$INJURIES, by = list(StormData$EVTYPE), data = StormData, sum)
StormDataAGG <- aggregate(StormData$FATALITIES ~ StormData$INJURIES, list(StormData$EVTYPE), data = StormData, sum)
StormDataAGG <- aggregate(StormData$FATALITIES ~ StormData$INJURIES, list(StormData$EVTYPE), sum)
View(StormDataAGG)
vignette(aggregate)
vignette("aggregate")
StormDataAGG <- ddply(StormData, "EVTYPE", function(X) data.frame(FATALITIES=sum(X$FATALITIES),INJURIES=sum(X$INJURIES)))
View(StormDataAGG)
StormDataAGG <- filter(StormData, FATALITIES>0 | INJURIES>0)
View(StormDataAGG)
StormDataAGG <- ddply(StormData, "EVTYPE", function(X) data.frame(FATALITIES=sum(X$FATALITIES),INJURIES=sum(X$INJURIES)))
StormDataAGG <- filter(StormDataAGG, FATALITIES>0 | INJURIES>0)
View(StormDataAGG)
#Set working directory and then download file, unzip it if it does not exist
setwd("C:/Users/soloveynv/Documents/R Scripts/Coursera/RepResearch/RepData_PeerAssessment1")
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
destFile <- "RepdataDataActivity.zip"
if (!file.exists(destFile)){
download.file(URL, destfile = destFile, mode='wb')
unzip(destFile)
}
DataActivity <- read.csv("activity.csv")
#What is mean total number of steps taken per day?
library(plyr)
library(ggplot2)
#1.Calculate the total number of steps taken per day
DataActivityDAY <- ddply(DataActivity, .(date), summarise, steps = sum(steps, na.rm = T))
#2. Make a histogram of the total number of steps
ggplot(DataActivityDAY, aes(steps)) +
geom_histogram(colour = "darkgreen", fill = "white", binwidth = 2000) +
geom_vline(aes(xintercept = median(steps), color="#dfc27d")) +
geom_vline(aes(xintercept = mean(steps), color="#80cdc1"))
median(DataActivityDAY$steps)
mean(DataActivityDAY$steps)
#What is the average daily activity pattern?
DataActivityAVG <- ddply(DataActivity, .(interval), summarise, AvgSteps = mean(steps, na.rm = T))
#1.Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
ggplot(DataActivityAVG, aes(interval, AvgSteps)) +
geom_line() +
ggtitle("Average daily activity") +
xlab("5-minute intervals") +
ylab("Averaged steps") +
geom_hline(aes(yintercept = max(AvgSteps), color="#dfc27d"))
#2.Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
summarise(DataActivityAVG, max(AvgSteps))
unique(StormDataAGG$evtype)
unique(StormDataAGG$EVTYPE)
setwd("C:/Users/soloveynv/Documents/R Scripts/Coursera/RepResearch2")
library(data.table)
library(R.utils)
library(ggplot2)
library(plyr)
library(dplyr)
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destFile <- "StormData.csv.bz2"
DataFile <- "StormData.csv"
if (!file.exists(destFile)){
download.file(URL, destfile = destFile, mode='wb')
}
bunzip2(destFile, DataFile)
StormData <- fread(DataFile)
str(StormData)
#StormData$BGN_DATE <- as.Date(StormData$BGN_DATE, format = "%m/%d/%Y %H:%M:%S")
#Aggregate data frame by EVType and sum of fatalities and injuries
StormDataAggFI <- ddply(StormData, "EVTYPE", function(X) data.frame(FATALITIES=sum(X$FATALITIES),INJURIES=sum(X$INJURIES)))
StormDataAggFI <- filter(StormDataAggFI, FATALITIES>0 | INJURIES>0)
StormDataAggDam <- ddply(StormData, "EVTYPE", function(x) data.frame(FATALITIES=sum(x$PROPDMG),INJURIES=sum(x$CROPDMG)))
StormDataAggDam <- filter(StormDataAggDam, PROPDMG>0 | CROPDMG>0)
StormData <- fread(DataFile)
StormDataAggFI <- ddply(StormData, "EVTYPE", function(x) data.frame(FATALITIES=sum(x$FATALITIES),INJURIES=sum(x$INJURIES)))
StormDataAggFI <- filter(StormDataAggFI, FATALITIES>0 | INJURIES>0)
StormDataAggDam <- ddply(StormData, "EVTYPE", function(x) data.frame(FATALITIES=sum(x$PROPDMG),INJURIES=sum(x$CROPDMG)))
StormDataAggDam <- filter(StormDataAggDam, PROPDMG>0 | CROPDMG>0)
StormDataAggDam <- ddply(StormData, "EVTYPE", function(x) data.frame(FATALITIES=sum(x$PROPDMG),INJURIES=sum(x$CROPDMG)))
View(StormDataAggDam)
StormDataAggDam <- ddply(StormData, "EVTYPE", function(x) data.frame(PROPDMG=sum(x$PROPDMG),CROPDMG=sum(x$CROPDMG)))
StormDataAggDam <- filter(StormDataAggDam, PROPDMG>0 | CROPDMG>0)
View(StormDataAggDam)
install.packages("stringdist")
library(stringdist)
getVersion()
